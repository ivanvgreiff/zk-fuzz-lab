# zk-fuzz-lab Makefile
#
# Phase 0: Basic smoke test to verify scaffold
# Phase 1: Walking skeleton for differential testing

.PHONY: smoke help clean run build test

# Default target
help:
	@echo "zk-fuzz-lab - ZKVM Differential Fuzzing Framework"
	@echo ""
	@echo "Available targets:"
	@echo "  make smoke          - Verify repository scaffold (Phase 0)"
	@echo "  make build          - Build all workspace members"
	@echo "  make test           - Run all tests"
	@echo "  make run CORE=<core> INPUT=<input> - Run differential test"
	@echo "  make batch          - Run all seed programs (Phase 3)"
	@echo "  make fuzz CORE=<core|all> - Run input mutation fuzzing (Phase 5)"
	@echo "  make clean          - Remove artifacts and build outputs"
	@echo "  make help           - Show this help message"
	@echo ""
	@echo "Examples:"
	@echo "  make run CORE=guest/cores/fib INPUT=inputs/fib_24.json"
	@echo "  make fuzz CORE=io_echo"
	@echo "  make fuzz CORE=io_echo,arithmetic"
	@echo "  make fuzz CORE=all"

# Phase 0 deliverable: verify scaffold is set up correctly
smoke:
	@echo "üîç Checking repository structure..."
	@test -d guest/cores || (echo "‚ùå guest/cores/ missing" && exit 1)
	@test -d generators/rustgen || (echo "‚ùå generators/rustgen/ missing" && exit 1)
	@test -d generators/rvgen || (echo "‚ùå generators/rvgen/ missing" && exit 1)
	@test -d mutators/source_mut || (echo "‚ùå mutators/source_mut/ missing" && exit 1)
	@test -d mutators/trace_mut || (echo "‚ùå mutators/trace_mut/ missing" && exit 1)
	@test -d adapters/sp1_guest || (echo "‚ùå adapters/sp1_guest/ missing" && exit 1)
	@test -d runners/native || (echo "‚ùå runners/native/ missing" && exit 1)
	@test -d runners/sp1 || (echo "‚ùå runners/sp1/ missing" && exit 1)
	@test -d oracles/rust_eq || (echo "‚ùå oracles/rust_eq/ missing" && exit 1)
	@test -d oracles/riscv_eq || (echo "‚ùå oracles/riscv_eq/ missing" && exit 1)
	@test -d oracles/spec_violations || (echo "‚ùå oracles/spec_violations/ missing" && exit 1)
	@test -d harness || (echo "‚ùå harness/ missing" && exit 1)
	@test -d inputs || (echo "‚ùå inputs/ missing" && exit 1)
	@test -d artifacts || (echo "‚ùå artifacts/ missing" && exit 1)
	@test -d ci || (echo "‚ùå ci/ missing" && exit 1)
	@echo "‚úÖ All directories present"
	@echo ""
	@echo "‚ú® Skeleton OK"

# Phase 1: Build all workspace members
build:
	@echo "üî® Building workspace..."
	@cargo build --release
	@echo "‚úÖ Build complete"

# Phase 1: Run all tests
test:
	@echo "üß™ Running tests..."
	@cargo test
	@echo "‚úÖ Tests complete"

# Phase 1: Run differential test
# Usage: make run CORE=guest/cores/fib INPUT=inputs/fib_24.json
run:
ifndef CORE
	$(error CORE is not set. Usage: make run CORE=guest/cores/fib INPUT=inputs/fib_24.json)
endif
ifndef INPUT
	$(error INPUT is not set. Usage: make run CORE=guest/cores/fib INPUT=inputs/fib_24.json)
endif
	@cargo run --release --bin harness -- run --core $(CORE) --input $(INPUT)

# Phase 3: Run batch tests on all seed cores
# Usage: make batch
batch:
	@echo "üîÅ Running batch tests on all seed cores..."
	@echo ""
	@make run CORE=guest/cores/fib INPUT=inputs/fib_24.json
	@echo ""
	@make run CORE=guest/cores/io_echo INPUT=inputs/io_echo_empty.json
	@echo ""
	@make run CORE=guest/cores/io_echo INPUT=inputs/io_echo_1kb.json
	@echo ""
	@make run CORE=guest/cores/arithmetic INPUT=inputs/arithmetic_add_normal.json
	@echo ""
	@make run CORE=guest/cores/arithmetic INPUT=inputs/arithmetic_add_overflow.json
	@echo ""
	@make run CORE=guest/cores/arithmetic INPUT=inputs/arithmetic_div_by_zero.json
	@echo ""
	@make run CORE=guest/cores/simple_struct INPUT=inputs/simple_struct_normal.json
	@echo ""
	@echo "‚úÖ Batch tests complete!"
	@echo "üìä Summary available in artifacts/summary.csv"

# Phase 5: Run input mutation fuzzing
# Usage: make fuzz CORE=io_echo  OR  make fuzz CORE=all  OR  make fuzz CORE=io_echo,arithmetic
fuzz:
ifndef CORE
	$(error CORE is not set. Usage: make fuzz CORE=io_echo  OR  make fuzz CORE=all)
	$(error Available cores: fib, panic_test, timeout_test, io_echo, arithmetic, simple_struct)
endif
	@cargo run --release --bin harness -- fuzz --cores $(CORE)

# Clean up generated artifacts
clean:
	@echo "üßπ Cleaning artifacts..."
	@rm -rf artifacts/*
	@rm -rf target/
	@echo "‚úÖ Clean complete"

